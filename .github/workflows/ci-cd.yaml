name: CI/CD Pipeline

on:
  push:
    branches: ["*"]
    tags: ["v*"]
  pull_request:
    branches: [main]

env:
  PROJECT_NAME: archivist

jobs:
  lint-and-test:
    name: Lint and Test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: stable

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Download dependencies
        run: go mod download

      - name: Golangci
        uses: golangci/golangci-lint-action@v8
        with:
          version: latest

      - name: Run tests
        run: make test

  build-matrix:
    name: Build Matrix
    runs-on: ubuntu-latest
    needs: lint-and-test
    strategy:
      matrix:
        include:
          - goos: linux
            goarch: amd64
            suffix: linux-amd64
          - goos: linux
            goarch: arm64
            suffix: linux-arm64
          - goos: linux
            goarch: arm
            goarm: 7
            suffix: linux-armv7
          - goos: windows
            goarch: amd64
            suffix: windows-amd64
            extension: .exe
          - goos: darwin
            goarch: amd64
            suffix: darwin-amd64
          - goos: darwin
            goarch: arm64
            suffix: darwin-arm64

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Download dependencies
        run: go mod download

      - name: Build binary
        env:
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
          GOARM: ${{ matrix.goarm }}
        run: |
          BINARY_NAME="${{ env.PROJECT_NAME }}-${{ matrix.suffix }}${{ matrix.extension }}"
          echo "Building $BINARY_NAME"
          go build -ldflags="-s -w" -o "$BINARY_NAME" ./cmd/archivist/

          # Создаем архив для удобства
          if [ "${{ matrix.goos }}" = "windows" ]; then
            zip "${BINARY_NAME%.exe}.zip" "$BINARY_NAME"
          else
            tar -czf "${BINARY_NAME}.tar.gz" "$BINARY_NAME"
          fi

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.PROJECT_NAME }}-${{ matrix.suffix }}
          path: |
            ${{ env.PROJECT_NAME }}-${{ matrix.suffix }}*
          retention-days: 7

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [lint-and-test, build-matrix]
    if: startsWith(github.ref, 'refs/tags/v') && github.ref_name == github.event.repository.default_branch
    permissions:
      contents: write
    strategy:
      matrix:
        include:
          - goos: linux
            goarch: amd64
            suffix: linux-amd64
          - goos: linux
            goarch: arm64
            suffix: linux-arm64
          - goos: linux
            goarch: arm
            goarm: 7
            suffix: linux-armv7
          - goos: windows
            goarch: amd64
            suffix: windows-amd64
            extension: .exe
          - goos: darwin
            goarch: amd64
            suffix: darwin-amd64
          - goos: darwin
            goarch: arm64
            suffix: darwin-arm64

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Download dependencies
        run: go mod download

      - name: Get tag name
        id: tag
        run: echo "tag=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

      - name: Build release binary
        env:
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
          GOARM: ${{ matrix.goarm }}
        run: |
          BINARY_NAME="${{ env.PROJECT_NAME }}-${{ steps.tag.outputs.tag }}-${{ matrix.suffix }}${{ matrix.extension }}"
          echo "Building release binary: $BINARY_NAME"

          BUILD_FLAGS="-ldflags=-s -w -X main.version=${{ steps.tag.outputs.tag }} -X main.buildTime=$(date -u +%Y-%m-%dT%H:%M:%SZ)"

          go build $BUILD_FLAGS -o "$BINARY_NAME" ./cmd/archivist/

          if command -v sha256sum >/dev/null; then
            sha256sum "$BINARY_NAME" > "$BINARY_NAME.sha256"
          else
            shasum -a 256 "$BINARY_NAME" > "$BINARY_NAME.sha256"
          fi

          if [ "${{ matrix.goos }}" = "windows" ]; then
            zip "${BINARY_NAME%.exe}.zip" "$BINARY_NAME" "$BINARY_NAME.sha256"
            ARCHIVE_NAME="${BINARY_NAME%.exe}.zip"
          else
            tar -czf "${BINARY_NAME}.tar.gz" "$BINARY_NAME" "$BINARY_NAME.sha256"
            ARCHIVE_NAME="${BINARY_NAME}.tar.gz"
          fi

          echo "BINARY_NAME=$BINARY_NAME" >> $GITHUB_ENV
          echo "ARCHIVE_NAME=$ARCHIVE_NAME" >> $GITHUB_ENV

      - name: Generate release notes
        id: release_notes
        run: |
          cat > release_notes.md << 'EOF'
          ## 🚀 Release ${{ steps.tag.outputs.tag }}

          ### 📦 Downloads

          | Platform | Architecture | Download |
          |----------|--------------|----------|
          | Linux | x86_64 | [archivist-${{ steps.tag.outputs.tag }}-linux-amd64.tar.gz](https://github.com/${{ github.repository }}/releases/download/${{ steps.tag.outputs.tag }}/archivist-${{ steps.tag.outputs.tag }}-linux-amd64.tar.gz) |
          | Linux | ARM64 | [archivist-${{ steps.tag.outputs.tag }}-linux-arm64.tar.gz](https://github.com/${{ github.repository }}/releases/download/${{ steps.tag.outputs.tag }}/archivist-${{ steps.tag.outputs.tag }}-linux-arm64.tar.gz) |
          | Linux | ARMv7 | [archivist-${{ steps.tag.outputs.tag }}-linux-armv7.tar.gz](https://github.com/${{ github.repository }}/releases/download/${{ steps.tag.outputs.tag }}/archivist-${{ steps.tag.outputs.tag }}-linux-armv7.tar.gz) |
          | Windows | x86_64 | [archivist-${{ steps.tag.outputs.tag }}-windows-amd64.zip](https://github.com/${{ github.repository }}/releases/download/${{ steps.tag.outputs.tag }}/archivist-${{ steps.tag.outputs.tag }}-windows-amd64.zip) |
          | macOS | Intel | [archivist-${{ steps.tag.outputs.tag }}-darwin-amd64.tar.gz](https://github.com/${{ github.repository }}/releases/download/${{ steps.tag.outputs.tag }}/archivist-${{ steps.tag.outputs.tag }}-darwin-amd64.tar.gz) |
          | macOS | Apple Silicon | [archivist-${{ steps.tag.outputs.tag }}-darwin-arm64.tar.gz](https://github.com/${{ github.repository }}/releases/download/${{ steps.tag.outputs.tag }}/archivist-${{ steps.tag.outputs.tag }}-darwin-arm64.tar.gz) |

          ### 🔐 Verification

          All binaries include SHA256 checksums for verification. After downloading, verify the integrity:

          ```bash
          # Linux/macOS
          sha256sum -c archivist-${{ steps.tag.outputs.tag }}-<platform>-<arch>.tar.gz.sha256

          # Windows (PowerShell)
          Get-FileHash archivist-${{ steps.tag.outputs.tag }}-windows-amd64.exe -Algorithm SHA256
          ```

          ### 📋 What's Changed

          EOF

          PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
          if [ -n "$PREVIOUS_TAG" ]; then
            echo "**Full Changelog**: https://github.com/${{ github.repository }}/compare/${PREVIOUS_TAG}...${{ steps.tag.outputs.tag }}" >> release_notes.md
          else
            echo "**This is the first release!** 🎉" >> release_notes.md
          fi

      - name: Upload to release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.tag.outputs.tag }}
          name: Release ${{ steps.tag.outputs.tag }}
          body_path: release_notes.md
          draft: false
          prerelease: ${{ contains(steps.tag.outputs.tag, '-') }}
          files: |
            ${{ env.BINARY_NAME }}
            ${{ env.BINARY_NAME }}.sha256
            ${{ env.ARCHIVE_NAME }}
          token: ${{ secrets.GITHUB_TOKEN }}
